name: 欧加真 Android 15 通用OKI内核-改

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  #KERNEL_NAME: 'android14-11-o-g8e4160e371e5'  #ace5 6.1.118
  KERNEL_NAME: 'android14-11-o-gbc77d52e878b'  #ace5 6.1.75
  #KERNELSU_VARIANT: 'SukiSU-Ultra'
  #KERNELSU_BRANCH: 'susfs-dev'

on:
  workflow_dispatch:

    inputs:
      better_net:
        description: '是否开启网络功能增强优化配置(优化代理连接,IPV6等功能)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      ssg_enable:
        description: '是否启用三星SSG IO调度器'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      kernel_suffix:
        description: '内核后缀(留空默认,开头别加连字符)'
        required: false
        type: string
        default: ''
      basebranch:
        required: true
        type: choice
        options:
          - sm8650_v_15.0.0_oneplus12
          - sm8650_v_15.0.0_oneplus_ace5
          - sm8650_v_15.0.0_ace_3_pro
          - sm8650_v_15.0.0_oneplus_13r
          - realme_GT5pro-AndroidV-common-source
        default: 'sm8650_v_15.0.0_oneplus12'
      KPM:
        type: boolean
        description: "是否启用KPM？"
        required: true
        default: false
      ksu_type:
        description: 'KernelSU分支(SukiSU Ultra/KernelSU Next,默认SukiSU Ultra)'
        required: true
        type: choice
        options:
          - SukiUltra
          - ksun
          - None
        default: 'SukiUltra'
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: false
      hook_method:
        description: hook模式(大部分情况manual即可，少数需切换sus su模式的场景才需要kprobes钩子)
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
      kernel_v:
        description: '75或118'
        required: false
        type: string
        default: '118'
        options:
          - '75'
          - '118'
        

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # ksuver: ${{ steps.ksu_version.outputs.ksuver }}
      ksuver: ${{ env.KSUVER }}
      sourcecode: ${{ env.sourcecode }}
    steps:
      - name: 最大化建筑空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Show selected inputs debug
        run: |
          echo "Selected kernel_suffix: ${{ github.event.inputs.kernel_suffix }}"
          echo "Selected basebranch: ${{ github.event.inputs.basebranch }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Selected ksu_type: ${{ github.event.inputs.ksu_type }}"
          echo "Selected KSUN SUSFS_ENABLED: ${{ github.event.inputs.SUSFS_ENABLED }}"
          echo "Selected ssg_enable: ${{ github.event.inputs.ssg_enable }}"
          echo "Selected better_net: ${{ github.event.inputs.better_net }}"
          echo "Selected hook_method: ${{ github.event.inputs.hook_method }}"
          echo "Selected kernel_v: ${{ github.event.inputs.kernel_v }}"
          
      - name: 安装配置环境依赖
        run: |
          sudo apt-mark hold firefox
          sudo apt update && sudo apt upgrade -y
          sudo apt-get install curl bison flex make binutils dwarves git lld pahole zip perl make gcc python3 python-is-python3 bc libssl-dev libelf-dev ccache -y
          
          # sudo rm -rf ./llvm.sh
          # sudo wget https://apt.llvm.org/llvm.sh
          # sudo chmod +x llvm.sh
          # sudo sudo ./llvm.sh 20 all

      - name: 初始化源码仓库
        run: |
          # ===== 初始化仓库 =====
          echo ">>> 初始化仓库..."
          rm -rf kernel_workspace
          mkdir kernel_workspace
          cd kernel_workspace

          if [[ "${{ github.event.inputs.kernel_v}}" == "75" ]]; then
             echo "正在克隆源码仓库...使用cctv18修改后的一加12源码"
             git clone --depth=1 https://github.com/cctv18/android_kernel_common_oneplus_sm8650 -b oneplus/sm8650_v_15.0.0_oneplus12 common
             echo "sourcecode=cctv18sm8650_v_15.0.0_oneplus12" >> $GITHUB_ENV
          else
             echo "正在克隆源码原版仓库..."
             git clone --depth 1 https://github.com/OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm8650/ -b oneplus/"${{ github.event.inputs.basebranch }}"  vendor
             mv vendor/* ..
             git clone --depth=1 https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650 -b oneplus/"${{ github.event.inputs.basebranch }}" common            
             echo "sourcecode=${{ github.event.inputs.basebranch}}" >> $GITHUB_ENV
          fi
         
          
          echo ">>> 初始化仓库完成"
          git clone https://github.com/Carl1984/oppo_oplus_realme_sm8650.git


          #lz4 1.10
          cp ./oppo_oplus_realme_sm8650/new/001-lz4.patch ./common/
          cp ./oppo_oplus_realme_sm8650/new/lz4armv8.S ./common/                   
          cp ./oppo_oplus_realme_sm8650/patches/002-zstd.patch ./common/

          #不挂载vendor，只补全链接文件时使用
          # rm -rf ./common/drivers/soc/oplus/*
          # cp -r ./oppo_oplus_realme_sm8650/Vendor/* ./common/drivers/soc/oplus/
          # rm -rf ./common/kernel/locking/locking_main.h
          # cp ./oppo_oplus_realme_sm8650/patches/locking_main.h ./common/kernel/locking/
          # rm -rf ./common/kernel/locking/oplus_locking.c
          # cp ./oppo_oplus_realme_sm8650/patches/oplus_locking.c ./common/kernel/locking/
          # rm -rf ./common/kernel/locking/sa_common_struct.h
          # cp ./oppo_oplus_realme_sm8650/patches/sa_common_struct.h ./common/kernel/locking/


          #补全SSG文件
          if [ "${{ github.event.inputs.ssg_enable }}" == "true" ]; then  
            rm -rf ./common/block/Kconfig.iosched
            rm -rf ./common/block/Makefile
            rm -rf ./common/block/elevator.c          
            cp -r ./oppo_oplus_realme_sm8650/block/* ./common/block/      
          fi            
          
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done
          
          ###############################测试代码#######################################################################
          cd ..
          mkdir toolchains
          cd toolchains
          git clone --depth 1 https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r547379.git
          cd android_prebuilts_clang_host_linux-x86_clang-r547379
          
          # mkdir neutron-clang
          # cd neutron-clang
          # curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
          # chmod +x antman
          # ./antman -S

      - name: 添加 SukiSU Ultra
        if: ${{github.event.inputs.ksu_type == 'SukiUltra'}}
        id: ksu_version
        run: |
          # 进入内核工作目录
          cd kernel_workspace

          echo "正在配置SukiSU Ultra..."
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          # 获取当前 Git 提交的短哈希 (8位)
          GIT_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
          echo "当前提交哈希: $GIT_COMMIT_HASH"
          export KSU_VERSION=$KSU_VERSION
          # 尝试最多 3 次获取 KernelSU API 版本号
          for i in {1..3}; do
            # 从远程 Makefile 中提取 KSU_API_VERSION
            KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | 
              # 查找第一个包含版本定义的行
              grep -m1 "KSU_VERSION_API :=" | 
              # 提取等号后的值
              awk -F'= ' '{print $2}' | 
              # 删除所有空白字符
              tr -d '[:space:]')
            # 如果成功获取到版本号则跳出循环，否则等待 1 秒后重试
            [ -n "$KSU_API_VERSION" ] && break || sleep 1
          done
          # 如果获取失败，使用默认版本号 3.1.7
          [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
          # 将 API 版本号存储到 GitHub 环境变量
          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
          # 创建版本定义模板&版本格式函数: 使用获取的提交哈希和固定后缀
          # KSU_VERSION_API: API 版本定义
          # KSU_VERSION_FULL: 完整版本定义
          VERSION_DEFINITIONS=$'define get_ksu_version_full\nv\\$1-'"$GIT_COMMIT_HASH"$'@cctv18\nendef\n\nKSU_VERSION_API := '"$KSU_API_VERSION"$'\nKSU_VERSION_FULL := v'"$KSU_API_VERSION"$'-'"$GIT_COMMIT_HASH"$'@cctv18'
          # 清理内核 Makefile 中的旧版本定义
          # 删除版本函数
          sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
          # 删除 API 版本定义
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          # 删除完整版本定义
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
          # 在 REPO_OWNER 行后插入新版本定义
          awk -v def="$VERSION_DEFINITIONS" '
            # 当找到 REPO_OWNER 行时，插入版本定义并设置标记
            /REPO_OWNER :=/ {print; print def; inserted=1; next}
            # 打印所有行
            1
            # 如果未找到插入点，在文件末尾追加
            END {if (!inserted) print def}
          ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

          # 生成自定义版本号（基于提交计数）, 失败时使用 114514
          KSU_VERSION=$(expr $(git rev-list --count main) + 10700 2>/dev/null || echo 114514)
          # 存储版本号到 GitHub 环境变量
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT

          # 验证修改结果
          grep -A10 "REPO_OWNER" kernel/Makefile  # 检查插入点后的内容
          grep "KSU_VERSION_FULL" kernel/Makefile # 确认版本定义存在
          echo "SukiSU版本号: v${KSU_API_VERSION}-${GIT_COMMIT_HASH}@cctv18"     
          
      # - name: 添加 SukiSU-Ultra
      #   if: ${{github.event.inputs.ksu_type == 'SukiUltra'}}
      #   id: ksu_version
      #   run: |
      #     cd kernel_workspace
      #     curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
      #     cd ./KernelSU
      #     KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
      #     echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
      #     echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
      #     export KSU_VERSION=$KSU_VERSION
      #     sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=$KSU_VERSION/" kernel/Makefile

      - name: Set up KernelSU Next
        if: ${{github.event.inputs.ksu_type == 'ksun'}}
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.SUSFS_ENABLED }}" == "true" ]]; then
            curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
            cd ./KernelSU-Next
            KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10158) #因为使用了第三方，需要随时更新conmmit数以更正版本号
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          else          
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
            BASE_VERSION=10200
            cd ./KernelSU-Next
            KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+"  $BASE_VERSION)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          fi 
          echo "✅ KernelSU Next 配置完成"



      - name: 应用 KernelSU & SUSFS 补丁
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "SukiUltra" ]]; then
            echo "正在添加SukiSU Ultra补丁..."
            git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
            cp ./SukiSU_patch/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 < syscall_hooks.patch || true
            patch -p1 < 69_hide_stuff.patch || true
          elif [[ "${{ github.event.inputs.ksu_type }}" == "ksun" ]]; then
            echo "正在添加KernelSU Next补丁..."          
            
            git clone https://github.com/WildKernels/kernel_patches.git
            cp ./kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
            cp ./kernel_patches/69_hide_stuff.patch ./common/

            if [[ "${{ github.event.inputs.SUSFS_ENABLED }}" == "true" ]]; then
              git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
              cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
              cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
              cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            fi 

            cd ./common
            if [[ "${{ github.event.inputs.SUSFS_ENABLED }}" == "true" ]]; then
              patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            fi   
            patch -p1 -N -F 3 < scope_min_manual_hooks_v1.4.patch || true
            patch -p1 -N -F 3 < 69_hide_stuff.patch || true
          fi
          
      # - name: 应用 SUSFS 修补程序 SukiSU-Ultra
      #   if: ${{github.event.inputs.ksu_type == 'SukiUltra'}}
      #   run: |
      #     cd kernel_workspace
      #     git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
      #     git clone https://github.com/ShirkNeko/SukiSU_patch.git
      #     cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
      #     cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
      #     cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
      #     cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
      #     cd ./common
      #     patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
      #     patch -p1 < syscall_hooks.patch || true

      # - name: 应用 Hide Stuff 修补程序
      #   if: ${{github.event.inputs.ksu_type == 'SukiUltra'}}
      #   run: |
      #     cd kernel_workspace/common
      #     cp ../SukiSU_patch/69_hide_stuff.patch ./
      #     patch -p1 < 69_hide_stuff.patch


          
      # - name: 应用 SUSFS 修补程序 ksun
      #   if: ${{github.event.inputs.ksu_type == 'ksun'}}
      #   run: |
      #     cd kernel_workspace   
      #     git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
      #     git clone https://github.com/WildKernels/kernel_patches.git
      #     # git clone https://github.com/KernelSU-Next/kernel_patches.git
      #     cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
      #     cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
      #     cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
      #     cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
      #     #cp ./kernel_patches/next/susfs_fix_patches/v1.5.9/* ./KernelSU-Next/
      #     #cp ./kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch ./KernelSU-Next/

      #     # Apply patches
      #     cd ./KernelSU-Next
      #     if [[ "${{ github.event.inputs.SUSFS_ENABLED }}" == "true" ]]; then
      #         echo "Applying SUSFS patches for KernelSU Next..."

      #         # patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true           

      #         # patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch              

      #         # patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
              
      #         # patch -p1 --forward --fuzz=3 < fix_selinux.c.patch              

      #         # patch -p1 --forward --fuzz=3 < fix_ksud.c.patch

      #         # patch -p1 --forward --fuzz=3 < fix_rules.c.patch              

      #         # cp ../oppo_oplus_realme_sm8650/patches/0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch ./
      #         # patch -p1 --forward --fuzz=3 < 0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch || true

      #         cd ../common


      #         patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
      #         cd ./KernelSU-Next

      #     fi     
      #         cd ../common
      #         # Replace next_hooks.patch with syscall_hooks.patch
      #         #cp ../kernel_patches/next/syscall_hooks.patch ./
      #         #patch -p1 -F 3 < syscall_hooks.patch
      #         cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
      #         patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch

      #         #cp ../kernel_patches/syscall_hook/min_scope_syscall_hooks_v1.4.patch ./
      #         #patch -p1 -F 3 < min_scope_syscall_hooks_v1.4.patch
                
      #         cp ../kernel_patches/69_hide_stuff.patch ./
      #         patch -p1 -F 3 < 69_hide_stuff.patch

          

          
      - name: 应用 lz4 patch  
        run: |
          cd kernel_workspace/common
          git apply --verbose -p1 < 001-lz4.patch --verbose
          patch -p1 < 002-zstd.patch         


          
      - name: 添加 SUSFS 配置设置

        run: |
          cd kernel_workspace
          if [ "${{ github.event.inputs.ksu_type }}" = "SukiUltra" ] ||  [ "${{ github.event.inputs.ksu_type }}" = "ksun"  ]; then
            echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
            if [[ "${{ github.event.inputs.ksu_type }}" == "SukiUltra" ]]; then
              if [[ "${{ github.event.inputs.KPM }}" == "true" ]]; then
                echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
              fi
                if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
                  echo "正在开启kprobes钩子..."
                  echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
                  echo "CONFIG_KSU_MANUAL_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
                  echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
                else
                  echo "正在开启manual钩子..."
                  echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
                  echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
                fi
            fi
            if [[ "${{ github.event.inputs.ksu_type }}" == "ksun" ]]; then

              if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
                echo "正在开启kprobes钩子..."
                echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_WITH_KPROBES=y" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
              else
                echo "正在开启manual钩子..."
                echo "CONFIG_KSU_WITH_KPROBES=n" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
              fi                
            fi
            echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi


          # 开启O2编译优化配置
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          #禁用 defconfig 检查
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: 启用网络功能增强优化配置
        run: |
          cd kernel_workspace
          if [ "${{ github.event.inputs.better_net }}" == "true" ]; then
            #启用  BPF 流解析器,实现高性能网络流量处理,增强网络监控和分析能力
            echo "CONFIG_BPF_STREAM_PARSER=y" >> ./common/arch/arm64/configs/gki_defconfig
            #开启增强 Netfilter 防火墙扩展模块,支持基于地址类型的匹配规则,启用 IP 集合支持,提高防火墙规则灵活性,支持更复杂的流量过滤策略
            echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            #启用 IP 集框架及其多种数据结构实现,提供高效的大规模 IP 地址管理,提高防火墙规则处理效率,减少内存占用
            echo "CONFIG_IP_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_MAX=65534" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_MAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_LIST_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            #启用 IPv6 网络地址转换
            echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./common/arch/arm64/configs/gki_defconfig
            #由于部分机型的vintf兼容性检测规则，在开启CONFIG_IP6_NF_NAT后开机会出现"您的设备内部出现了问题。请联系您的设备制造商了解详情。"的提示，故添加一个配置修复补丁，在编译内核时隐藏CONFIG_IP6_NF_NAT=y但不影响对应功能编译
            cd common
            wget https://github.com/cctv18/oppo_oplus_realme_sm8650/raw/refs/heads/main/other_patch/config.patch
            patch -p1 -F 3 < config.patch || true
          fi

      # - name: 禁用 defconfig 检查
      #   if: ${{github.event.inputs.ksu_type == 'None' }}
      #   run: |
      #     cd kernel_workspace
      #     #禁用 defconfig 检查
      #     sed -i 's/check_defconfig//' ./common/build.config.gki
      


      - name: 启用三星SSG IO调度器
        run: |
          if [[ "${{ github.event.inputs.ssg_enable }}" == "true" ]]; then
            echo "正在启用三星SSG IO调度器…"
            cd kernel_workspace
            echo "CONFIG_MQ_IOSCHED_SSG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi          
      - name: 添加制作名称
        run: |
          cd kernel_workspace
          echo "替换内核版本后缀..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "当前内核版本后缀：${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "当前内核版本后缀：${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi
           
      - name: 构建内核
        run: |
          export PATH="$GITHUB_WORKSPACE/toolchains/android_prebuilts_clang_host_linux-x86_clang-r547379/bin:$PATH"
          # export PATH="$GITHUB_WORKSPACE/toolchains/neutron-clang/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          echo $PATH
          export CLANG_TRIPLE="aarch64-linux-gnu-"
          export CROSS_COMPILE="${CLANG_TRIPLE}"
          cd kernel_workspace
          cd common
          # make -j$(nproc --all) LLVM=-20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnuabeihf- CC=clang LD=ld.lld HOSTCC=clang HOSTLD=ld.lld O=out KCFLAGS+=-Wno-error gki_defconfig all
          # make -j$(nproc --all) LLVM=-20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- SUBARCH=arm64 CC=clang LD=ld.lld HOSTCC=clang HOSTLD=ld.lld O=out KCFLAGS+=-Wno-error gki_defconfig all
          # make -j"$(nproc --all)" LLVM=1 LLVM_IAS=1 ARCH=arm64 SUBARCH=arm64  CROSS_COMPILE=aarch64-linux-gnu- CC="clang" O=out CONFIG_LTO_CLANG=y CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n CONFIG_LTO_NONE=n gki_defconfig all 
          make -j"$(nproc --all)" LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error CONFIG_LTO_CLANG=y CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n CONFIG_LTO_NONE=n gki_defconfig all
          echo "内核编译完成！"
          echo "BT=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
         
      - name: 应用KPMpatch_linux并修补内核
        if: ${{github.event.inputs.ksu_type == 'SukiUltra' && github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/common/out/arch/arm64/boot
          #curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          # curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image     

      - name: Set suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.better_net == 'true' && '_betternet' || '' }}${{ github.event.inputs.ssg_enable == 'true' && '_ssg' || '' }}" >> $GITHUB_OUTPUT
          
      - name: 克隆 AnyKernel3 并打包
        run: |
          cd kernel_workspace
          git clone https://github.com/cctv18/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [ ! -f ./Image ]; then
            echo "未找到内核镜像文件，构建可能出错"
            exit 1
          fi
          
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            zip -r ../AnyKernel3_${{ github.event.inputs.ksu_type }}_${{ env.KSUVER }}${{ steps.suffix.outputs.value }}_${{ github.event.inputs.kernel_suffix }}_${{ env.BT }}.zip ./*
          else
            zip -r ../AnyKernel3_${{ github.event.inputs.ksu_type }}_${{ env.KSUVER }}${{ steps.suffix.outputs.value }}_${{ env.KERNEL_NAME }}_${{ env.BT }}.zip ./*
          fi

      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: 设置环境变量
        run: |
          if [[ "${{ github.event.inputs.kernel_v}}" == "75" ]]; then
            if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
              FULL_VERSION=${{ format('{0}.75-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
              echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
              export FULL_VERSION=$FULL_VERSION
            else
              FULL_VERSION=${{ format('{0}.75-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
              echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
              export FULL_VERSION=$FULL_VERSION
            fi
          else
            if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
              FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
              echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
              export FULL_VERSION=$FULL_VERSION
            else
              FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
              echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
              export FULL_VERSION=$FULL_VERSION
            fi  
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="A15-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
         
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}-${{ env.TIME }}"
          body: |
            ### 📱 欧加真 Android 15 KSU SM8650 通用内核 | 构建信息
            - 内核版本号: ${{ env.FULL_VERSION }}
            - 编译时间: ${{ env.TIME_FORM }}
            - 机型：欧加真骁龙8Gen3 6.1 Android 15内核通用（基于${{ needs.build.outputs.sourcecode }} 的 Android 15 OKI源码）
            - 特性：
            - KUS Type：${{ github.event.inputs.ksu_type }}   
            - KPM：${{ github.event.inputs.KPM }}   （KSU 为 SukiSU 时 ）
            - KSUN SUSFS_ENABLED ：${{ github.event.inputs.SUSFS_ENABLED }}   （KSU 暂时SUSFS 编译出错 ）
            - 网络功能增强：${{ github.event.inputs.better_net }}
            - 三星SSG IO调度器支持：${{ github.event.inputs.ssg_enable }}
            - SukiSU管理器下载：[SukiSU-Ultra](https://github.com/ShirkNeko/SukiSU-Ultra/releases)
            - KSU Next 管理器：[KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next/releases)
            ### ⏫️ 更新内容：
            - 更新KSU至最新版本（${{ needs.build.outputs.ksuver }}）
            - KUS Type 为None 的内核 无root 支持（请使用LKM模式， 仅做其他编译优化）， 不为None的内核 支持 SUSFS + VFS
            - 升级LZ4 到 1.10

          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
