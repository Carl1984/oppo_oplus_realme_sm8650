name: 欧加真 Android 15 通用OKI内核-改

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: 'android14-11-o-g8e4160e371e5'  #ace5 6.1.118
  # KERNEL_NAME: 'android14-11-o-g239209decfd3'  #ace5 6.1.75
  #KERNEL_NAME: 'android14-11-o-gb3c173388f97' #13R
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-dev'

on:
  workflow_dispatch:

    inputs:
      lz4k_enable:
        description: '是否安装 LZ4K 补丁'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      bbr_enable:
        description: "是否启用bbr算法(优化上行数据,对手机日用无太大意义甚至可能负优化;false关闭,true仅加入算法,default设为默认)"
        required: true
        type: choice
        default: 'true'
        options:
          - 'false'
          - 'true'
          - 'default'
      ssg_enable:
        description: '是否启用三星SSG IO调度器'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      kernel_suffix:
        description: '内核后缀(留空默认,开头别加连字符)'
        required: false
        type: string
        default: ''
      basebranch:
        required: true
        type: choice
        options:
          - sm8650_v_15.0.0_oneplus12
          - sm8650_v_15.0.0_oneplus_ace5
          - sm8650_v_15.0.0_ace_3_pro
          - sm8650_v_15.0.0_oneplus_13r
          - realme_GT5pro-AndroidV-common-source
        default: 'sm8650_v_15.0.0_oneplus_ace5'
      KPM:
        type: boolean
        description: "是否启用KPM？"
        required: true
        default: false
      ksu_type:
        description: '要用的ksu'
        required: true
        type: choice
        options:
          - SukiUltra
          - ksun
          - None
        default: 'SukiUltra'
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: false
      hook_method:
        description: hook模式(大部分情况manual即可，少数需切换sus su模式的场景才需要kprobes钩子)
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
        

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # ksuver: ${{ steps.ksu_version.outputs.ksuver }}
      ksuver: ${{ env.KSUVER }}
      sourcecode: ${{ env.sourcecode }}
    steps:
      - name: 最大化建筑空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Show selected inputs debug
        run: |
          echo "Selected lz4k_enable: ${{ github.event.inputs.lz4k_enable }}"
          echo "Selected kernel_suffix: ${{ github.event.inputs.kernel_suffix }}"
          echo "Selected basebranch: ${{ github.event.inputs.basebranch }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Selected ksu_type: ${{ github.event.inputs.ksu_type }}"
          echo "Selected KSUN SUSFS_ENABLED: ${{ github.event.inputs.SUSFS_ENABLED }}"
          echo "Selected bbr_enable: ${{ github.event.inputs.bbr_enable }}"
          echo "Selected ssg_enable: ${{ github.event.inputs.ssg_enable }}"
          echo "Selected hook_method: ${{ github.event.inputs.hook_method }}"
          
      - name: 安装配置环境依赖
        run: |
          sudo apt-mark hold firefox
          sudo apt update && sudo apt upgrade -y
          sudo apt-get install curl bison flex make binutils dwarves git lld pahole zip perl make gcc python3 python-is-python3 bc libssl-dev libelf-dev ccache -y
          
          # sudo rm -rf ./llvm.sh
          # sudo wget https://apt.llvm.org/llvm.sh
          # sudo chmod +x llvm.sh
          # sudo sudo ./llvm.sh 20 all

      - name: 初始化源码仓库
        run: |
          # ===== 初始化仓库 =====
          echo ">>> 初始化仓库..."
          rm -rf kernel_workspace
          mkdir kernel_workspace
          cd kernel_workspace

          if [[ "${{ github.event.inputs.bbr_enable }}" == "true" || "${{ github.event.inputs.bbr_enable }}" == "default" || "${{ github.event.inputs.ssg_enable }}" == "true" ]]; then
            echo "正在克隆源码仓库...使用cctv18修改后的一加12源码"
            git clone --depth=1 https://github.com/cctv18/android_kernel_common_oneplus_sm8650 -b oneplus/sm8650_v_15.0.0_oneplus12_6.1.118 common
            # git clone --depth=1 https://github.com/cctv18/android_kernel_common_oneplus_sm8650 -b oneplus/sm8650_v_15.0.0_oneplus12 common
            echo "sourcecode=cctv18sm8650_v_15.0.0_oneplus12_6.1.118" >> $GITHUB_ENV
          else
            echo "正在克隆源码原版仓库..."
            git clone --depth 1 https://github.com/OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm8650/ -b oneplus/"${{ github.event.inputs.basebranch }}"  vendor
            mv vendor/* ..
            git clone --depth=1 https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650 -b oneplus/"${{ github.event.inputs.basebranch }}" common            
            echo "sourcecode=${{ github.event.inputs.basebranch}}" >> $GITHUB_ENV

          fi
          echo ">>> 初始化仓库完成"
          git clone https://github.com/Carl1984/oppo_oplus_realme_sm8650.git


          #lz4 1.10
          cp ./oppo_oplus_realme_sm8650/new/001-lz4.patch ./common/
          cp ./oppo_oplus_realme_sm8650/new/lz4armv8.S ./common/         
          
          cp ./oppo_oplus_realme_sm8650/patches/002-zstd.patch ./common/

          #不挂载vendor，只补全链接文件时使用
          # rm -rf ./common/drivers/soc/oplus/*
          # cp -r ./oppo_oplus_realme_sm8650/Vendor/* ./common/drivers/soc/oplus/
          # rm -rf ./common/kernel/locking/locking_main.h
          # cp ./oppo_oplus_realme_sm8650/patches/locking_main.h ./common/kernel/locking/
          # rm -rf ./common/kernel/locking/oplus_locking.c
          # cp ./oppo_oplus_realme_sm8650/patches/oplus_locking.c ./common/kernel/locking/
          # rm -rf ./common/kernel/locking/sa_common_struct.h
          # cp ./oppo_oplus_realme_sm8650/patches/sa_common_struct.h ./common/kernel/locking/
          
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done
          
          ###############################测试代码#######################################################################
          cd ..
          mkdir toolchains
          cd toolchains
          git clone --depth 1 https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r547379.git
          cd android_prebuilts_clang_host_linux-x86_clang-r547379
          
          # mkdir neutron-clang
          # cd neutron-clang
          # curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
          # chmod +x antman
          # ./antman -S

          
          
      - name: 添加 SukiSU-Ultra
        if: ${{github.event.inputs.ksu_type == 'SukiUltra'}}
        id: ksu_version
        run: |
          cd kernel_workspace
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=$KSU_VERSION/" kernel/Makefile

      - name: 应用 SUSFS 修补程序 SukiSU-Ultra
        if: ${{github.event.inputs.ksu_type == 'SukiUltra'}}
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          patch -p1 < syscall_hooks.patch || true

      - name: 应用 Hide Stuff 修补程序
        if: ${{github.event.inputs.ksu_type == 'SukiUltra'}}
        run: |
          cd kernel_workspace/common
          cp ../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 < 69_hide_stuff.patch

      - name: Set up KernelSU Next
        if: ${{github.event.inputs.ksu_type == 'ksun'}}
        run: |
          cd kernel_workspace
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          BASE_VERSION=10200
          cd ./KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+"  $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: 应用 SUSFS 修补程序 ksun
        if: ${{github.event.inputs.ksu_type == 'ksun'}}
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
          fi        
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/WildKernels/kernel_patches.git
          # git clone https://github.com/KernelSU-Next/kernel_patches.git
          cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          #cp ./kernel_patches/next/susfs_fix_patches/v1.5.9/* ./KernelSU-Next/
          #cp ./kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch ./KernelSU-Next/

          # Apply patches
          cd ./KernelSU-Next
          if [[ "${{ github.event.inputs.SUSFS_ENABLED }}" == "true" ]]; then
              echo "Applying SUSFS patches for KernelSU Next..."

              # patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true           

              # patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch              

              # patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
              
              # patch -p1 --forward --fuzz=3 < fix_selinux.c.patch              

              # patch -p1 --forward --fuzz=3 < fix_ksud.c.patch

              # patch -p1 --forward --fuzz=3 < fix_rules.c.patch              

              # cp ../oppo_oplus_realme_sm8650/patches/0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch ./
              # patch -p1 --forward --fuzz=3 < 0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch || true

              cd ../common


              patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
              cd ./KernelSU-Next

          fi     
              cd ../common
              # Replace next_hooks.patch with syscall_hooks.patch
              #cp ../kernel_patches/next/syscall_hooks.patch ./
              #patch -p1 -F 3 < syscall_hooks.patch
              cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
              patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch

              #cp ../kernel_patches/syscall_hook/min_scope_syscall_hooks_v1.4.patch ./
              #patch -p1 -F 3 < min_scope_syscall_hooks_v1.4.patch
                
              cp ../kernel_patches/69_hide_stuff.patch ./
              patch -p1 -F 3 < 69_hide_stuff.patch

          

          
      - name: 应用 lz4 patch  
        run: |
          cd kernel_workspace/common
          git apply --verbose -p1 < 001-lz4.patch --verbose
          patch -p1 < 002-zstd.patch

          
      - name: 应用 lz4k 补丁
        run: |
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            cd kernel_workspace/common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi

          
      - name: 添加 SUSFS 配置设置

        run: |
          cd kernel_workspace
          if [ "${{ github.event.inputs.ksu_type }}" = "SukiUltra" ] ||  [ "${{ github.event.inputs.ksu_type }}" = "ksun"  ]; then
            echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
            if [[ "${{ github.event.inputs.ksu_type }}" == "SukiUltra" ]]; then
              if [[ "${{ github.event.inputs.KPM }}" == "true" ]]; then
                echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
              fi
                if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
                  echo "正在开启kprobes钩子..."
                  echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
                  echo "CONFIG_KSU_MANUAL_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
                  echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
                else
                  echo "正在开启manual钩子..."
                  echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
                  echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
                fi
            fi
            if [[ "${{ github.event.inputs.ksu_type }}" == "ksun" ]]; then

              if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
                echo "正在开启kprobes钩子..."
                echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_WITH_KPROBES=y" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
              else
                echo "正在开启manual钩子..."
                echo "CONFIG_KSU_WITH_KPROBES=n" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
                echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
              fi                
            fi
            echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
            # 以下配置未核实必要性，待测试
            #echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' ./common/arch/arm64/configs/gki_defconfig
          fi
          # Add BBR
          # echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          # echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          # echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          # echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          # echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          # echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
          #禁用 defconfig 检查
          sed -i 's/check_defconfig//' ./common/build.config.gki

      # - name: 禁用 defconfig 检查
      #   if: ${{github.event.inputs.ksu_type == 'None' }}
      #   run: |
      #     cd kernel_workspace
      #     #禁用 defconfig 检查
      #     sed -i 's/check_defconfig//' ./common/build.config.gki
      
      - name: 添加 BBR 等一系列拥塞控制算法
        run: |
          if [[ "${{ github.event.inputs.bbr_enable }}" == "true" || "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
            echo "正在添加BBR等拥塞控制算法..."
            cd kernel_workspace
            #开启TCP拥塞控制算法控制器（必需）
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            ################################################################################################################################
            # BBR：基于链路容量的代表拥塞控制算法，不再使用丢包、延时等信号去衡量拥塞是否发生，而是直接对网络建模来应对、避免真实的网络拥塞；
            # 具有高吞吐、低延迟、抗丢包的特点，但在手机上使用时由于持续探测带宽/RTT、高频计算与发包增加 CPU 和射频模块功耗，会增加耗电及发热；
            # 且移动基站缓冲区深度通常较小（~50ms），BBR 的带宽探测阶段（ProbeRTT）过度降窗可能导致吞吐量骤降，且网络切换（WiFi→5G）时需重新
            # 探测参数，反而增加延迟或导致速率振荡（短暂卡顿），且存在 RTT 不公平性，与基于丢包的流竞争时可能过于强势，在混合网络环境中
            #（如 BBR + CUBIC 共存），BBR 会抢占更多其他软件的带宽，降低其他应用的公平性（如后台软件更新影响前台视频播放）。
            # 因此，虽然BBR可以显著减少排队延迟，抗丢包能力强，带宽利用率高，但由于其会增加耗电，且易导致网络速率波动，故安卓系统默认不使用
            # BBR拥塞算法，而是使用在吞吐量、稳定性、兼容性、能效之间取得最佳平衡的CUBIC算法。在开启BBR前，请考虑自己是否真的有使用BBR的必要。
            ################################################################################################################################
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            #CUBIC：安卓的默认TCP拥塞控制算法，在吞吐量、稳定性、兼容性、能效之间取得最佳平衡，具有高兼容性与公平性、抗网络波动性强、低计算开销的特点，是绝大部分移动场景的优先选择
            echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig
            #VEGAS：基于时延的拥塞控制算法之一，将回路响应时间（Round Trip Time，RTT）增加视为出现拥塞，增加时增大拥塞窗口，减小时减小拥塞窗口
            echo "CONFIG_TCP_CONG_VEGAS=y" >> ./common/arch/arm64/configs/gki_defconfig
            #New Vegas：Vegas 算法的改进版，优化了 RTT 测量和竞争公平性，可以更准确地检测拥塞，与 Reno/CUBIC 共存能力提升
            echo "CONFIG_TCP_CONG_NV=y" >> ./common/arch/arm64/configs/gki_defconfig
            #Westwood+：基于带宽估计（ACK 到达率）动态设置拥塞窗口和慢启动阈值；快速恢复，适合无线网络（区分拥塞丢包与无线丢包）
            echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig
            #HTCP：一种基于损失的算法，使用 AIMD 来控制拥塞窗口，根据 RTT 动态调整增长因子，结合延迟和丢包信号，针对高延迟的高速网络进行优化
            echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
            #brutal：一种通过主动探测 + 激进抢占最大化吞吐量的拥塞算法，无拥塞窗口上限，轻度丢包（<20%）不降窗，避免类似 BBR 的 ProbeRTT 阶段，
            #持续维持高发送速率，与 Reno/CUBIC 共存时，Brutal 可通过高频发包抢占 90%+ 带宽，适用于高丢包弱网环境（如公共 Wi-Fi、蜂窝网络）及
            #直播推流、云游戏上行链路等需优先保证吞吐量而非延迟敏感的场景，提升弱网吞吐性能，对抗运营商 QoS 限速。但由于TCP Brutal 仅在应用程序
            #对每个 TCP 连接设置带宽参数之后才能正常工作，绝大部分安卓应用都不支持该操作，故请勿将 TCP Brutal 设置成默认拥塞控制算法。
            echo "CONFIG_TCP_CONG_BRUTAL=y" >> ./common/arch/arm64/configs/gki_defconfig
            if [ "${{ github.event.inputs.bbr_enable }}" == "default" ]; then
              echo "正在将BBR设为默认拥塞控制算法..."
              echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
            else
              echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig
            fi
          fi

      - name: 启用三星SSG IO调度器
        run: |
          if [[ "${{ github.event.inputs.ssg_enable }}" == "true" ]]; then
            echo "正在启用三星SSG IO调度器…"
            cd kernel_workspace
            echo "CONFIG_MQ_IOSCHED_SSG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi          
      - name: 添加制作名称
        run: |
          cd kernel_workspace
          echo "替换内核版本后缀..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "当前内核版本后缀：${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "当前内核版本后缀：${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi
           
      - name: 构建内核
        run: |
          export PATH="$GITHUB_WORKSPACE/toolchains/android_prebuilts_clang_host_linux-x86_clang-r547379/bin:$PATH"
          # export PATH="$GITHUB_WORKSPACE/toolchains/neutron-clang/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          echo $PATH
          export CLANG_TRIPLE="aarch64-linux-gnu-"
          export CROSS_COMPILE="${CLANG_TRIPLE}"
          cd kernel_workspace
          cd common
          # make -j$(nproc --all) LLVM=-20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnuabeihf- CC=clang LD=ld.lld HOSTCC=clang HOSTLD=ld.lld O=out KCFLAGS+=-Wno-error gki_defconfig all
          # make -j$(nproc --all) LLVM=-20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- SUBARCH=arm64 CC=clang LD=ld.lld HOSTCC=clang HOSTLD=ld.lld O=out KCFLAGS+=-Wno-error gki_defconfig all
          make -j"$(nproc --all)" LLVM=1 LLVM_IAS=1 ARCH=arm64 SUBARCH=arm64  CROSS_COMPILE=aarch64-linux-gnu- CC="clang" O=out CONFIG_LTO_CLANG=y CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n CONFIG_LTO_NONE=n gki_defconfig all 
          echo "内核编译完成！"
          echo "BT=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
         
      - name: 应用KPMpatch_linux并修补内核
        if: ${{github.event.inputs.ksu_type == 'SukiUltra' && github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/common/out/arch/arm64/boot
          #curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          # curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image     

      - name: Set suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.bbr_enable == 'true' && '_bbr' || '' }}${{ github.event.inputs.ssg_enable == 'true' && '_ssg' || '' }}" >> $GITHUB_OUTPUT
          
      - name: 克隆 AnyKernel3 并打包
        run: |
          cd kernel_workspace
          git clone https://github.com/cctv18/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [ ! -f ./Image ]; then
            echo "未找到内核镜像文件，构建可能出错"
            exit 1
          fi
          if [[ ${{ github.event.inputs.lz4k_enable }} == "true" ]]; then
            wget https://raw.githubusercontent.com/Suxiaoqinx/kernel_manifest_OnePlus_Sukisu_Ultra/main/zram.zip
          fi
          
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            zip -r ../AnyKernel3_${{ github.event.inputs.ksu_type }}_${{ env.KSUVER }}${{ steps.suffix.outputs.value }}_${{ github.event.inputs.kernel_suffix }}_${{ env.BT }}.zip ./*
          else
            zip -r ../AnyKernel3_${{ github.event.inputs.ksu_type }}_${{ env.KSUVER }}${{ steps.suffix.outputs.value }}_${{ env.KERNEL_NAME }}_${{ env.BT }}.zip ./*
          fi

      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: 设置环境变量
        run: |
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          else
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="A15-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
         
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}-${{ env.TIME }}"
          body: |
            ### 📱 欧加真 Android 15 KSU SM8650 通用内核 | 构建信息
            - 内核版本号: ${{ env.FULL_VERSION }}
            - 编译时间: ${{ env.TIME_FORM }}
            - 机型：欧加真骁龙8Gen3 6.1 Android 15内核通用（基于${{ needs.build.outputs.sourcecode }} 的 Android 15 OKI源码）
            - 特性：
            - KUS Type：${{ github.event.inputs.ksu_type }}   
            - KPM：${{ github.event.inputs.KPM }}   （KSU 为 SukiSU 时 ）
            - KSUN SUSFS_ENABLED ：${{ github.event.inputs.SUSFS_ENABLED }}   （KSU 暂时SUSFS 编译出错 ）
            - LZ4K支持：${{ github.event.inputs.lz4k_enable }}
            - BBR/Brutal 等拥塞控制算法支持：${{ github.event.inputs.bbr_enable }}
            - 三星SSG IO调度器支持：${{ github.event.inputs.ssg_enable }}
            - SukiSU管理器下载：[SukiSU-Ultra](https://github.com/ShirkNeko/SukiSU-Ultra/releases)
            - KSU Next 管理器：[KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next/releases)
            ### ⏫️ 更新内容：
            - 更新KSU至最新版本（${{ needs.build.outputs.ksuver }}）
            - KUS Type 为None 的内核 无root 支持（请使用LKM模式， 仅做其他编译优化）， 不为None的内核 支持 SUSFS + VFS
            - 升级LZ4 到 1.10

          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
